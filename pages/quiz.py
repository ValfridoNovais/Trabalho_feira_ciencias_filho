import streamlit as st
import random

def show():
    # T√≠tulo
    st.title("üéÆ Quiz Interativo")
    st.write("Teste seus conhecimentos sobre a hist√≥ria de Jo√£o e o P√© de Feij√£o!")

    # Inicializando estados na sess√£o
    if "score" not in st.session_state:
        st.session_state.score = 0  # Pontua√ß√£o inicial
    if "question_index" not in st.session_state:
        st.session_state.question_index = 0  # √çndice da quest√£o atual
    if "stop_quiz" not in st.session_state:
        st.session_state.stop_quiz = False  # Controle para parar o quiz
    if "answered" not in st.session_state:
        st.session_state.answered = False  # Controle de resposta por quest√£o
    if "shuffled_questions" not in st.session_state:
        st.session_state.shuffled_questions = []  # Perguntas embaralhadas

    # Lista original de perguntas
    questions = [
        {"question": "O que Jo√£o trocou pela vaca?", "options": ["Alguns feij√µes m√°gicos"], "answer": "Alguns feij√µes m√°gicos", "points": 2},
        {"question": "O que cresceu dos feij√µes m√°gicos?", "options": ["Um p√© de feij√£o gigante"], "answer": "Um p√© de feij√£o gigante", "points": 2},
        {"question": "Quem vivia no castelo?", "options": ["Um gigante"], "answer": "Um gigante", "points": 2},
        {"question": "Por que Jo√£o aceitou os feij√µes m√°gicos em troca da vaca?", "options": ["Porque ele era curioso e impulsivo"], "answer": "Porque ele era curioso e impulsivo", "points": 3},
        {"question": "Como Jo√£o escapou do gigante?", "options": ["Cortou o p√© de feij√£o"], "answer": "Cortou o p√© de feij√£o", "points": 3},
        {"question": "O que a decis√£o de Jo√£o de trocar a vaca por feij√µes m√°gicos nos ensina?", "options": ["A import√¢ncia de arriscar √†s vezes"], "answer": "A import√¢ncia de arriscar √†s vezes", "points": 4},
        {"question": "Qual √© a mensagem principal da hist√≥ria?", "options": ["Intelig√™ncia pode superar a for√ßa"], "answer": "Intelig√™ncia pode superar a for√ßa", "points": 4},
        {"question": "Por que Jo√£o dividiu a riqueza com sua m√£e?", "options": ["Porque cuidar da fam√≠lia √© importante"], "answer": "Porque cuidar da fam√≠lia √© importante", "points": 4},
    ]

    # Op√ß√µes fict√≠cias para preencher as perguntas
    filler_options = [
        "Uma galinha dourada", "Um ba√∫ de ouro", "Um castelo m√°gico",
        "Uma harpa m√°gica", "Uma √°rvore de ma√ß√£s", "Que dinheiro √© mais importante",
        "Porque ele queria enganar o gigante","Uma bolsa cheia de moedas", "Uma espada m√°gica", "Um mapa do tesouro", "Uma coroa dourada", "Um anel encantado", "Uma √°rvore de feij√µes m√°gicos", "Uma torre de cristal", "Uma varinha m√°gica", "Uma po√ß√£o de invisibilidade", "Um livro de feiti√ßos", "Um drag√£o adormecido", "Uma ponte para o c√©u", "Uma carruagem encantada", "Uma bola de cristal", "Uma flauta m√°gica", "Um cavalo voador", "Uma chave dourada", "Uma caverna cheia de diamantes", "Uma pulseira m√°gica", "Um rel√≥gio que para o tempo", "Gan√¢ncia e poder", "A for√ßa f√≠sica", "Os perigos da curiosidade"
        ]
    

    # Fun√ß√£o para embaralhar perguntas e respostas
    def shuffle_questions():
        shuffled = []
        for question in questions:
            # Adicionar op√ß√µes fict√≠cias at√© completar 4
            while len(question["options"]) < 4:
                option = random.choice(filler_options)
                if option not in question["options"] and option != question["answer"]:
                    question["options"].append(option)
            # Embaralhar as op√ß√µes
            random.shuffle(question["options"])
            shuffled.append(question)
        random.shuffle(shuffled)
        return shuffled

    # Inicializar as perguntas embaralhadas ao carregar o quiz
    if not st.session_state.shuffled_questions:
        st.session_state.shuffled_questions = shuffle_questions()

    # Fun√ß√£o para reiniciar o quiz
    def reset_quiz():
        st.session_state.score = 0
        st.session_state.question_index = 0
        st.session_state.stop_quiz = False
        st.session_state.answered = False
        st.session_state.shuffled_questions = shuffle_questions()  # Reembaralha as perguntas

    # Verifica se o quiz foi interrompido
    if st.session_state.stop_quiz:
        st.success(f"Voc√™ decidiu parar! Sua pontua√ß√£o final √©: {st.session_state.score}")
        if st.button("Reiniciar Quiz"):
            reset_quiz()  # Reinicia o quiz no fluxo natural
        return

    # Pegar a quest√£o atual
    current_question = st.session_state.shuffled_questions[st.session_state.question_index]

    # Exibir a pergunta
    st.subheader(f"Quest√£o {st.session_state.question_index + 1}: {current_question['question']}")
    selected_option = st.radio(
        "Escolha uma op√ß√£o:",
        current_question["options"],
        key=f"q{st.session_state.question_index}"
    )

    # Bot√µes para enviar ou parar
    col1, col2 = st.columns(2)

    with col1:
        if st.button("Enviar Resposta") and not st.session_state.answered:
            st.session_state.answered = True
            if selected_option == current_question["answer"]:
                st.session_state.score += current_question["points"]
                st.success(f"Correto! Voc√™ ganhou {current_question['points']} pontos.")
            else:
                st.session_state.score -= 1
                st.error(f"Errado! Voc√™ perdeu 1 ponto. A resposta correta era: {current_question['answer']}")

    with col2:
        if st.button("Parar o Quiz"):
            st.session_state.stop_quiz = True

    # Exibir o bot√£o para pr√≥xima quest√£o
    if st.session_state.answered:
        if st.button("Pr√≥xima Quest√£o"):
            # Avan√ßar para a pr√≥xima quest√£o
            if st.session_state.question_index + 1 < len(st.session_state.shuffled_questions):
                st.session_state.question_index += 1
                st.session_state.answered = False
            else:
                st.success(f"Parab√©ns! Voc√™ completou o quiz. Sua pontua√ß√£o final √©: {st.session_state.score}")
                st.session_state.stop_quiz = True




